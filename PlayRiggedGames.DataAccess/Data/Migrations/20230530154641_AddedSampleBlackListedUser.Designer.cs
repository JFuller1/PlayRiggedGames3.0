// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayRiggedGames.DataAccess.Data;

#nullable disable

namespace PlayRiggedGames.DataAccess.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230530154641_AddedSampleBlackListedUser")]
    partial class AddedSampleBlackListedUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eda3e09d-0aaa-4e19-984a-7b511c387a86",
                            ConcurrencyStamp = "e6f60242-c4e5-4959-95e1-7b8517203777",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "e820885b-8490-4367-8bd6-50440fed5b39",
                            ConcurrencyStamp = "445dc940-0954-43c7-ba95-cd55241a65ac",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f2672e1f-cf38-45a5-94d0-8ebb0c2ce2ce",
                            RoleId = "eda3e09d-0aaa-4e19-984a-7b511c387a86"
                        },
                        new
                        {
                            UserId = "d68aba42-86f9-45de-b529-c53869d23b1f",
                            RoleId = "e820885b-8490-4367-8bd6-50440fed5b39"
                        },
                        new
                        {
                            UserId = "d207e04f-7a11-452e-8a48-23bae4fcd12f",
                            RoleId = "e820885b-8490-4367-8bd6-50440fed5b39"
                        },
                        new
                        {
                            UserId = "b3e93844-b0c1-4e5b-a308-64353b0208d1",
                            RoleId = "e820885b-8490-4367-8bd6-50440fed5b39"
                        },
                        new
                        {
                            UserId = "0dd9ce5d-2e8d-4831-9087-7f2deab0082f",
                            RoleId = "e820885b-8490-4367-8bd6-50440fed5b39"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("BlackListed")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f2672e1f-cf38-45a5-94d0-8ebb0c2ce2ce",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2000, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlackListed = false,
                            ConcurrencyStamp = "60d1be7c-9002-40b7-b1c0-ed81bedce127",
                            Email = "fuller.jc@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Jaeden",
                            LastName = "Fuller",
                            LockoutEnabled = false,
                            Money = 1000000,
                            NormalizedUserName = "ZABLOO",
                            PasswordHash = "AQAAAAEAACcQAAAAEGc5yvPXnuzlHjwhAUDdU90vl87GHwRF204ouzG50x6OqR9wDjHLqtgQ3g2SHaJ42Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ec42af0-cb25-4fc8-98ca-211c49495fa8",
                            TwoFactorEnabled = false,
                            UserName = "ZaBloo"
                        },
                        new
                        {
                            Id = "d68aba42-86f9-45de-b529-c53869d23b1f",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1969, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlackListed = false,
                            ConcurrencyStamp = "48e64c17-5b05-4ed2-97b8-ec167226a329",
                            Email = "b.shot@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "S.",
                            LastName = "G.",
                            LockoutEnabled = false,
                            Money = 0,
                            NormalizedUserName = "NUMBER1RATEDSALESMAN1997",
                            PasswordHash = "AQAAAAEAACcQAAAAEHD3MVMDyhABlxY0ndyPAQr9DECMyvJTb5tGh30UEXG019SSk+9ZrwG4lSDFSo7PZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d10061a-a21f-4c48-8c74-cbb4d4ba60f1",
                            TwoFactorEnabled = false,
                            UserName = "number1ratedsalesman1997"
                        },
                        new
                        {
                            Id = "d207e04f-7a11-452e-8a48-23bae4fcd12f",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1995, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlackListed = false,
                            ConcurrencyStamp = "45743549-5ee6-444c-861e-886b317bff29",
                            Email = "example@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Money = 120,
                            NormalizedUserName = "COOLCAT12",
                            PasswordHash = "AQAAAAEAACcQAAAAEMPcP45IXACf16twcp8aC5mKj2Q9z+Eg1xjB2r1ulwpBhpSLcuKdlR8wkmP1jHPqLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78e7e2c9-f613-4dae-919a-20a34d8031b4",
                            TwoFactorEnabled = false,
                            UserName = "CoolCat12"
                        },
                        new
                        {
                            Id = "b3e93844-b0c1-4e5b-a308-64353b0208d1",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1998, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlackListed = false,
                            ConcurrencyStamp = "e7707c2b-31f0-4b2d-9ef3-1f25cf1dd0ac",
                            Email = "example@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Samantha",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            Money = 750,
                            NormalizedUserName = "LONEWOLF",
                            PasswordHash = "AQAAAAEAACcQAAAAEMO6LpH7rHUhyAkaGJICxVKbewGaPLEPAPH1tTUFxtBmzvbCGhgF9Vr+wlEFEVtvnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d272f31a-0d91-474c-8c9a-027cfedfd3df",
                            TwoFactorEnabled = false,
                            UserName = "LoneWolf"
                        },
                        new
                        {
                            Id = "0dd9ce5d-2e8d-4831-9087-7f2deab0082f",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2002, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlackListed = false,
                            ConcurrencyStamp = "9fe2aad7-f71d-48e2-a1e4-4b78cbb21edb",
                            Email = "example@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Veronica",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            Money = 200,
                            NormalizedUserName = "GAMERGIRL123",
                            PasswordHash = "AQAAAAEAACcQAAAAEAacvUQJrriDUmskxV35aTxT1XWDIE3otgYIOe2601aq3hQllHBmoJ6UQ6QDHDQ3Ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a505021-ab5c-46d9-87f5-c87e142fbb1a",
                            TwoFactorEnabled = false,
                            UserName = "GamerGirl123"
                        },
                        new
                        {
                            Id = "0dd9ce5d-123d-4831-9087-7f2deab0082f",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1905, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlackListed = true,
                            ConcurrencyStamp = "ece2c73b-0f9f-4b38-8cc9-478ac0776d44",
                            Email = "exoimple@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Evil",
                            LastName = "Jaeden",
                            LockoutEnabled = false,
                            Money = 200,
                            NormalizedUserName = "EVILZABLOO",
                            PasswordHash = "AQAAAAEAACcQAAAAEIhdBgDdMySDmjPjvdnj91fHEbtFTy81wkrlSdHoUnof0uxbpaxNsYaWxf8xKkhDAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46ac99d8-321b-4037-82c5-4f1048b216ae",
                            TwoFactorEnabled = false,
                            UserName = "EvilZabloo"
                        });
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotGameLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Jackpot")
                        .HasColumnType("bit");

                    b.Property<int>("MoneyInput")
                        .HasColumnType("int");

                    b.Property<int>("MoneyOutput")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("SlotGameLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Jackpot = false,
                            MoneyInput = 50,
                            MoneyOutput = 2500,
                            PlayerId = "f2672e1f-cf38-45a5-94d0-8ebb0c2ce2ce",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6942)
                        },
                        new
                        {
                            Id = 2,
                            Jackpot = false,
                            MoneyInput = 200,
                            MoneyOutput = 8000,
                            PlayerId = "f2672e1f-cf38-45a5-94d0-8ebb0c2ce2ce",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6946)
                        },
                        new
                        {
                            Id = 3,
                            Jackpot = false,
                            MoneyInput = 150,
                            MoneyOutput = 5000,
                            PlayerId = "f2672e1f-cf38-45a5-94d0-8ebb0c2ce2ce",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6950)
                        },
                        new
                        {
                            Id = 4,
                            Jackpot = true,
                            MoneyInput = 300,
                            MoneyOutput = 15000,
                            PlayerId = "f2672e1f-cf38-45a5-94d0-8ebb0c2ce2ce",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6953)
                        },
                        new
                        {
                            Id = 5,
                            Jackpot = false,
                            MoneyInput = 1000,
                            MoneyOutput = 25000,
                            PlayerId = "f2672e1f-cf38-45a5-94d0-8ebb0c2ce2ce",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6957)
                        },
                        new
                        {
                            Id = 6,
                            Jackpot = false,
                            MoneyInput = 100,
                            MoneyOutput = 5000,
                            PlayerId = "d68aba42-86f9-45de-b529-c53869d23b1f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6960)
                        },
                        new
                        {
                            Id = 7,
                            Jackpot = false,
                            MoneyInput = 200,
                            MoneyOutput = 10000,
                            PlayerId = "d68aba42-86f9-45de-b529-c53869d23b1f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6963)
                        },
                        new
                        {
                            Id = 8,
                            Jackpot = false,
                            MoneyInput = 150,
                            MoneyOutput = 7500,
                            PlayerId = "d68aba42-86f9-45de-b529-c53869d23b1f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6967)
                        },
                        new
                        {
                            Id = 9,
                            Jackpot = true,
                            MoneyInput = 300,
                            MoneyOutput = 15000,
                            PlayerId = "d68aba42-86f9-45de-b529-c53869d23b1f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6970)
                        },
                        new
                        {
                            Id = 10,
                            Jackpot = false,
                            MoneyInput = 250,
                            MoneyOutput = 12500,
                            PlayerId = "d68aba42-86f9-45de-b529-c53869d23b1f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6974)
                        },
                        new
                        {
                            Id = 11,
                            Jackpot = false,
                            MoneyInput = 100,
                            MoneyOutput = 5000,
                            PlayerId = "d207e04f-7a11-452e-8a48-23bae4fcd12f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6977)
                        },
                        new
                        {
                            Id = 12,
                            Jackpot = false,
                            MoneyInput = 200,
                            MoneyOutput = 10000,
                            PlayerId = "d207e04f-7a11-452e-8a48-23bae4fcd12f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6981)
                        },
                        new
                        {
                            Id = 13,
                            Jackpot = false,
                            MoneyInput = 150,
                            MoneyOutput = 7500,
                            PlayerId = "d207e04f-7a11-452e-8a48-23bae4fcd12f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6984)
                        },
                        new
                        {
                            Id = 14,
                            Jackpot = true,
                            MoneyInput = 300,
                            MoneyOutput = 15000,
                            PlayerId = "d207e04f-7a11-452e-8a48-23bae4fcd12f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6988)
                        },
                        new
                        {
                            Id = 15,
                            Jackpot = false,
                            MoneyInput = 250,
                            MoneyOutput = 12500,
                            PlayerId = "d207e04f-7a11-452e-8a48-23bae4fcd12f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6991)
                        },
                        new
                        {
                            Id = 16,
                            Jackpot = false,
                            MoneyInput = 100,
                            MoneyOutput = 5000,
                            PlayerId = "b3e93844-b0c1-4e5b-a308-64353b0208d1",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6995)
                        },
                        new
                        {
                            Id = 17,
                            Jackpot = false,
                            MoneyInput = 200,
                            MoneyOutput = 10000,
                            PlayerId = "b3e93844-b0c1-4e5b-a308-64353b0208d1",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(6998)
                        },
                        new
                        {
                            Id = 18,
                            Jackpot = false,
                            MoneyInput = 150,
                            MoneyOutput = 7500,
                            PlayerId = "b3e93844-b0c1-4e5b-a308-64353b0208d1",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7002)
                        },
                        new
                        {
                            Id = 19,
                            Jackpot = true,
                            MoneyInput = 300,
                            MoneyOutput = 15000,
                            PlayerId = "b3e93844-b0c1-4e5b-a308-64353b0208d1",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7005)
                        },
                        new
                        {
                            Id = 20,
                            Jackpot = false,
                            MoneyInput = 250,
                            MoneyOutput = 12500,
                            PlayerId = "b3e93844-b0c1-4e5b-a308-64353b0208d1",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7009)
                        },
                        new
                        {
                            Id = 21,
                            Jackpot = false,
                            MoneyInput = 100,
                            MoneyOutput = 5000,
                            PlayerId = "0dd9ce5d-2e8d-4831-9087-7f2deab0082f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7012)
                        },
                        new
                        {
                            Id = 22,
                            Jackpot = false,
                            MoneyInput = 200,
                            MoneyOutput = 10000,
                            PlayerId = "0dd9ce5d-2e8d-4831-9087-7f2deab0082f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7016)
                        },
                        new
                        {
                            Id = 23,
                            Jackpot = false,
                            MoneyInput = 150,
                            MoneyOutput = 7500,
                            PlayerId = "0dd9ce5d-2e8d-4831-9087-7f2deab0082f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7019)
                        },
                        new
                        {
                            Id = 24,
                            Jackpot = true,
                            MoneyInput = 300,
                            MoneyOutput = 15000,
                            PlayerId = "0dd9ce5d-2e8d-4831-9087-7f2deab0082f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7023)
                        },
                        new
                        {
                            Id = 25,
                            Jackpot = false,
                            MoneyInput = 250,
                            MoneyOutput = 12500,
                            PlayerId = "0dd9ce5d-2e8d-4831-9087-7f2deab0082f",
                            Time = new DateTime(2023, 5, 30, 10, 46, 41, 476, DateTimeKind.Local).AddTicks(7026)
                        });
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutOfOrder")
                        .HasColumnType("bit");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SlotMachines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 5,
                            Height = 3,
                            Name = "LuckySlots",
                            OutOfOrder = false,
                            Width = 5
                        },
                        new
                        {
                            Id = 2,
                            Cost = 0,
                            Height = 5,
                            Name = "DailySpin",
                            OutOfOrder = false,
                            Width = 7
                        });
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotOutcome", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("SlotMachineId")
                        .HasColumnType("int");

                    b.Property<int>("SymbolId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "Location");

                    b.HasIndex("SymbolId");

                    b.ToTable("SlotOutcomes");
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotSymbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SlotMachineId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SlotMachineId");

                    b.ToTable("SlotSymbols");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "club",
                            SlotMachineId = 1,
                            Value = 75,
                            Weight = 30
                        },
                        new
                        {
                            Id = 2,
                            Name = "lemon",
                            SlotMachineId = 1,
                            Value = 25,
                            Weight = 50
                        },
                        new
                        {
                            Id = 3,
                            Name = "spade",
                            SlotMachineId = 1,
                            Value = 75,
                            Weight = 30
                        },
                        new
                        {
                            Id = 4,
                            Name = "banana",
                            SlotMachineId = 1,
                            Value = 30,
                            Weight = 50
                        },
                        new
                        {
                            Id = 5,
                            Name = "cherry",
                            SlotMachineId = 1,
                            Value = 50,
                            Weight = 50
                        },
                        new
                        {
                            Id = 6,
                            Name = "diamond",
                            SlotMachineId = 1,
                            Value = 75,
                            Weight = 30
                        },
                        new
                        {
                            Id = 7,
                            Name = "melon",
                            SlotMachineId = 1,
                            Value = 35,
                            Weight = 50
                        },
                        new
                        {
                            Id = 8,
                            Name = "grapes",
                            SlotMachineId = 1,
                            Value = 40,
                            Weight = 50
                        },
                        new
                        {
                            Id = 9,
                            Name = "heart",
                            SlotMachineId = 1,
                            Value = 75,
                            Weight = 30
                        },
                        new
                        {
                            Id = 10,
                            Name = "dice",
                            SlotMachineId = 1,
                            Value = 110,
                            Weight = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = "chip",
                            SlotMachineId = 1,
                            Value = 100,
                            Weight = 10
                        },
                        new
                        {
                            Id = 12,
                            Name = "orange",
                            SlotMachineId = 1,
                            Value = 45,
                            Weight = 50
                        },
                        new
                        {
                            Id = 13,
                            Name = "strawberry",
                            SlotMachineId = 1,
                            Value = 55,
                            Weight = 50
                        },
                        new
                        {
                            Id = 14,
                            Name = "emerald",
                            SlotMachineId = 1,
                            Value = 200,
                            Weight = 5
                        },
                        new
                        {
                            Id = 15,
                            Name = "coin",
                            SlotMachineId = 1,
                            Value = 135,
                            Weight = 10
                        },
                        new
                        {
                            Id = 16,
                            Name = "bell",
                            SlotMachineId = 1,
                            Value = 125,
                            Weight = 10
                        },
                        new
                        {
                            Id = 17,
                            Name = "horseshoe",
                            SlotMachineId = 1,
                            Value = 150,
                            Weight = 10
                        },
                        new
                        {
                            Id = 18,
                            Name = "clover",
                            SlotMachineId = 1,
                            Value = 175,
                            Weight = 5
                        },
                        new
                        {
                            Id = 19,
                            Name = "crown",
                            SlotMachineId = 1,
                            Value = 500,
                            Weight = 5
                        },
                        new
                        {
                            Id = 20,
                            Name = "seven",
                            SlotMachineId = 1,
                            Value = 1000,
                            Weight = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PlayRiggedGames.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PlayRiggedGames.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayRiggedGames.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PlayRiggedGames.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotGameLog", b =>
                {
                    b.HasOne("PlayRiggedGames.Domain.Models.ApplicationUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotOutcome", b =>
                {
                    b.HasOne("PlayRiggedGames.Domain.Models.SlotGameLog", "Game")
                        .WithMany("SlotOutcomes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayRiggedGames.Domain.Models.SlotSymbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotSymbol", b =>
                {
                    b.HasOne("PlayRiggedGames.Domain.Models.SlotMachine", "SlotMachine")
                        .WithMany("Values")
                        .HasForeignKey("SlotMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlotMachine");
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotGameLog", b =>
                {
                    b.Navigation("SlotOutcomes");
                });

            modelBuilder.Entity("PlayRiggedGames.Domain.Models.SlotMachine", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
